/gamedata/tutorials/tutorial_tileset.png
--------
{
  "name": "Récupération des actions de jeu",
  "version": "2.1.0",
  "game_area": {
    "nb_tile_width": 6,
    "nb_tile_height": 4
  },
  "tile_size": 32,
  "img_coords": {
    "head_green": [96, 0],
    "square_gray": [0, 64]
  }
}
--------
"""
Ce tutoriel affiche un quadrillage et écrit des informations
dans le log de squarity à chaque interaction :

 - clic de souris
 - appui sur les boutons de directions ou sur les touches du clavier
 - appui sur les 2 boutons d'actions, ou sur les touches "1" et "2",

Le 'log de squarity' est la zone de texte située à gauche
des flèches de direction. C'est également à cet endroit que s'affiche
les exceptions python, les messages d'erreur, etc.
"""

import squarity

class GameModel(squarity.GameModelBase):

    def on_start(self):
        # La fonction python standard 'print' écrit dans le log de squarity
        print("Démarrage du jeu.")
        # Il y a une fonction spéciale, dans la librairie squarity,
        # pour itérer sur les coordonnées de l'aire de jeu.
        # Elle sera montrée dans un autre tutoriel.
        for y in range(self.h):
            for x in range(self.w):
                # On additionne les coordonnées, puis on vérifie si la somme
                # est impaire. Ça permet de considérer une case sur deux.
                if (x+y) % 2:
                    # On ajoute un game object représentant un carré gris,
                    # sur toutes les "cases impaires", pour dessiner un damier.
                    gobj = squarity.GameObject(
                        squarity.Coord(x, y),
                        "square_gray",
                    )
                    self.layer_main.add_game_object(gobj)
        print("Affichage quadrillage ok.")

    def on_click(self, coord):
        # Cette fonction est exécutée à chaque clic dans l'aire de jeu.
        # Le paramètre 'coord' est une instance de squarity.Coord,
        # il indique quelle case du jeu a été cliquée.
        # Vous pouvez récupérer les deux coordonnées avec coord.x et coord.y
        # Pour plus d'infos, voir la doc sur la classe Coord :
        # http://https://squarity.pythonanywhere.com//create/maindocv2#class-coord
        # Cette fonction ne peut pas être plus précise. Vous ne pouvez pas
        # savoir exactement quel pixel a été cliqué, ni où se situe le
        # clic à l'intérieur de la case cliquée.
        # (Ce sera peut-être amélioré dans une future version du moteur du jeu).
        print("-------------")
        print("Clic aux coordonnées", coord)

    def on_button_direction(self, direction):
        # Cette fonction est exécutée lors de l'activation d'une direction,
        # soit par un clic sur un bouton, soit par un appui sur
        # une touche de direction du clavier.
        # Le paramètre 'direction' est une instance de squarity.Direction,
        # il indique quelle direction a été activée.
        # La valeur 'direction.vector' est une Coord contenant des valeurs
        # 0, -1 et +1. Elle représente le déplacement en x et en y
        # correspondant à la direction, sur une distance de une case.
        # Pour plus d'infos, voir la doc sur la classe Direction :
        # http://https://squarity.pythonanywhere.com//create/maindocv2#class-direction
        print("-------------")
        print("Appui sur la direction :", direction, int(direction))
        print("Vecteur correspondant :", direction.vector)

    def on_button_action(self, action_name):
        # Cette fonction est exécutée lors de l'activation d'une action,
        # soit par un clic sur un bouton, soit par un appui sur
        # la touche "1" ou "2" du clavier.
        # Le paramètre 'action_name' est une chaîne de caractère, qui vaut
        # 'action_1' ou 'action_2'.
        print("-------------")
        print("Activation de l'action :", action_name)


"""
---------------
Modifications à essayer
---------------

Ces modifs vous permettront de comprendre le fonctionnement du code,
ce qui vous aidera lors de la création de vos jeux.

Pensez à cliquer sur le bouton "Exécuter" après chacune
de vos modifications, pour voir le résultat dans le jeu.

1. Lors d'un clic, écrire séparément dans le log, la valeur X et la valeur Y
des coordonnées de la case cliquée.

2. Lors d'un clic, ajouter un game object de tête verte sur la case cliquée.
La configuration contient déjà la définition de l'image "head_green",
comme dans le tutoriel précédent.

3. Lors de l'activation d'une action (1 ou 2), itérer sur toutes les
cases de l'aire de jeu et compter le nombre total de game object présents
(les carrés gris + les têtes vertes). Pour cela, vous aurez besoin de la
fonction permettant de récupérer les game objects d'une case.
Consultez la doc :
http://https://squarity.pythonanywhere.com//create/maindocv2#r%C3%A9cup%C3%A9rer-des-tiles-et-des-game-objects
"""
