/gamedata/examples/f40ans_tileset.png
--------
{
  "name": "A 40 years birthday gift",
  "game_area": {
    "nb_tile_width": 8,
    "nb_tile_height": 7
  },
  "version": "1.0.0",
  "tile_size": 64,

  "img_coords": {
    "pote_over_head": [0, 6],
    "pote_head_smile": [0, 70],
    "pote_head": [64, 70],
    "pote_torso_norm": [0, 134],
    "pote_torso_offer_1": [64, 134],
    "pote_torso_offer_2a": [128, 134],
    "pote_torso_offer_2b": [128, 70],
    "pote_legs": [0, 198],

    "pote_over_head_shake": [0, 31],
    "pote_head_smile_shake": [0, 95],
    "pote_head_shake": [64, 95],
    "pote_torso_norm_shake": [0, 159],
    "pote_torso_offer_1_shake": [64, 159],
    "pote_torso_offer_2a_shake": [128, 159],
    "pote_torso_offer_2b_shake": [128, 95],
    "pote_legs_shake": [0, 223],

    "me_head": [288, 70],
    "me_torso_norm": [288, 134],
    "me_torso_offer_1": [224, 134],
    "me_torso_offer_2": [160, 134],
    "me_legs": [288, 198],

    "inventory_interface": [1072, 964],

    "shop_table_plank": [753, 900],
    "shop_table_pole": [817, 900],

    "buffoon_cap_centered": [81, 888],
    "buffoon_cap_1": [81, 928],
    "buffoon_cap_2": [81, 864],

    "buffoon_scepter_centered": [231, 888],
    "buffoon_scepter_1": [231, 928],
    "buffoon_scepter_2": [231, 864],
    "buffoon_scepter_dark": [231, 738],

    "plastic_sword_centered": [152, 888],
    "plastic_sword_1": [152, 928],
    "plastic_sword_2": [152, 864],

    "candle_pnk": [38, 717],
    "candle_blu": [20, 718],
    "candle_grn": [152, 717],

    "gift_mcdo_centered": [1, 897],
    "gift_mcdo_1": [1, 928],
    "gift_mcdo_2": [1, 864],
    "gift_mcdo_1_shake": [1, 948],
    "gift_mcdo_2_shake": [1, 884],

    "school_pole_1": [279, 645],
    "school_pole_2": [279, 581],
    "school_pole_3": [279, 517],
    "school_pole_4": [279, 453],

    "school_pole_1_shake": [279, 665],
    "school_pole_2_shake": [279, 601],
    "school_pole_3_shake": [279, 537],
    "school_pole_4_shake": [279, 473],

    "url_ads_0": [369, 900],
    "url_ads_1": [433, 900],
    "url_ads_2": [497, 900],
    "url_ads_3": [561, 900],
    "url_ads_4": [625, 900],
    "url_ads_5": [689, 900],

    "R_norm_00_00": [0, 325],
    "R_norm_00_01": [0, 389],
    "R_norm_00_02": [0, 453],
    "R_norm_00_03": [0, 517],
    "R_norm_00_04": [0, 581],
    "R_norm_00_05": [0, 645],
    "R_norm_01_00": [64, 325],
    "R_norm_01_01": [64, 389],
    "R_norm_01_02": [64, 453],
    "R_norm_01_03": [64, 517],
    "R_norm_01_04": [64, 581],
    "R_norm_01_05": [64, 645],

    "R_norm_00_00_shake": [0, 345],
    "R_norm_00_01_shake": [0, 409],
    "R_norm_00_02_shake": [0, 473],
    "R_norm_00_03_shake": [0, 537],
    "R_norm_00_04_shake": [0, 601],
    "R_norm_00_05_shake": [0, 665],
    "R_norm_01_00_shake": [64, 345],
    "R_norm_01_01_shake": [64, 409],
    "R_norm_01_02_shake": [64, 473],
    "R_norm_01_03_shake": [64, 537],
    "R_norm_01_04_shake": [64, 601],
    "R_norm_01_05_shake": [64, 665],

    "R_angry_00_00": [128, 261],
    "R_angry_00_01": [128, 325],
    "R_angry_00_02": [128, 389],
    "R_angry_00_03": [128, 453],
    "R_angry_00_04": [128, 517],
    "R_angry_00_05": [128, 581],
    "R_angry_00_06": [128, 645],
    "R_angry_01_00": [192, 261],
    "R_angry_01_01": [192, 325],
    "R_angry_01_02": [192, 389],
    "R_angry_01_03": [192, 453],
    "R_angry_01_04": [192, 517],
    "R_angry_01_05": [192, 581],
    "R_angry_01_06": [192, 645],

    "R_angry_00_00_shake": [128, 281],
    "R_angry_00_01_shake": [128, 345],
    "R_angry_00_02_shake": [128, 409],
    "R_angry_00_03_shake": [128, 473],
    "R_angry_00_04_shake": [128, 537],
    "R_angry_00_05_shake": [128, 601],
    "R_angry_00_06_shake": [128, 665],
    "R_angry_01_00_shake": [192, 281],
    "R_angry_01_01_shake": [192, 345],
    "R_angry_01_02_shake": [192, 409],
    "R_angry_01_03_shake": [192, 473],
    "R_angry_01_04_shake": [192, 537],
    "R_angry_01_05_shake": [192, 601],
    "R_angry_01_06_shake": [192, 665],

    "bg_black": [858, 1029],

    "text_one_year_0": [304, 964],
    "text_one_year_1": [368, 964],
    "text_one_year_2": [432, 964],
    "text_later_0": [496, 964],
    "text_later_1": [560, 964],
    "text_later_2": [624, 964],
    "text_later_3": [688, 964],
    "text_earlier_0": [752, 964],
    "text_earlier_1": [816, 964],
    "text_earlier_2": [880, 964],
    "text_earlier_3": [944, 964],
    "text_many_years_0": [304, 1029],
    "text_many_years_1": [368, 1029],
    "text_many_years_2": [432, 1029],
    "text_many_years_3": [496, 1029],
    "text_many_years_4": [560, 1029],
    "text_many_years_5": [624, 1029],
    "text_many_years_6": [688, 1029],
    "text_many_years_7": [752, 1029],

    "bg_outside_00_00": [369, 1],
    "bg_outside_00_01": [369, 65],
    "bg_outside_00_02": [369, 129],
    "bg_outside_00_03": [369, 193],
    "bg_outside_00_04": [369, 257],
    "bg_outside_00_05": [369, 321],
    "bg_outside_00_06": [369, 385],
    "bg_outside_01_00": [433, 1],
    "bg_outside_01_01": [433, 65],
    "bg_outside_01_02": [433, 129],
    "bg_outside_01_03": [433, 193],
    "bg_outside_01_04": [433, 257],
    "bg_outside_01_05": [433, 321],
    "bg_outside_01_06": [433, 385],
    "bg_outside_02_00": [497, 1],
    "bg_outside_02_01": [497, 65],
    "bg_outside_02_02": [497, 129],
    "bg_outside_02_03": [497, 193],
    "bg_outside_02_04": [497, 257],
    "bg_outside_02_05": [497, 321],
    "bg_outside_02_06": [497, 385],
    "bg_outside_03_00": [561, 1],
    "bg_outside_03_01": [561, 65],
    "bg_outside_03_02": [561, 129],
    "bg_outside_03_03": [561, 193],
    "bg_outside_03_04": [561, 257],
    "bg_outside_03_05": [561, 321],
    "bg_outside_03_06": [561, 385],
    "bg_outside_04_00": [625, 1],
    "bg_outside_04_01": [625, 65],
    "bg_outside_04_02": [625, 129],
    "bg_outside_04_03": [625, 193],
    "bg_outside_04_04": [625, 257],
    "bg_outside_04_05": [625, 321],
    "bg_outside_04_06": [625, 385],
    "bg_outside_05_00": [689, 1],
    "bg_outside_05_01": [689, 65],
    "bg_outside_05_02": [689, 129],
    "bg_outside_05_03": [689, 193],
    "bg_outside_05_04": [689, 257],
    "bg_outside_05_05": [689, 321],
    "bg_outside_05_06": [689, 385],
    "bg_outside_06_00": [753, 1],
    "bg_outside_06_01": [753, 65],
    "bg_outside_06_02": [753, 129],
    "bg_outside_06_03": [753, 193],
    "bg_outside_06_04": [753, 257],
    "bg_outside_06_05": [753, 321],
    "bg_outside_06_06": [753, 385],
    "bg_outside_07_00": [817, 1],
    "bg_outside_07_01": [817, 65],
    "bg_outside_07_02": [817, 129],
    "bg_outside_07_03": [817, 193],
    "bg_outside_07_04": [817, 257],
    "bg_outside_07_05": [817, 321],
    "bg_outside_07_06": [817, 385],

    "bg_party_00_00": [883, 1],
    "bg_party_00_01": [883, 65],
    "bg_party_00_02": [883, 129],
    "bg_party_00_03": [883, 193],
    "bg_party_00_04": [883, 257],
    "bg_party_00_05": [883, 321],
    "bg_party_00_06": [883, 385],
    "bg_party_01_00": [947, 1],
    "bg_party_01_01": [947, 65],
    "bg_party_01_02": [947, 129],
    "bg_party_01_03": [947, 193],
    "bg_party_01_04": [947, 257],
    "bg_party_01_05": [947, 321],
    "bg_party_01_06": [947, 385],
    "bg_party_02_00": [1011, 1],
    "bg_party_02_01": [1011, 65],
    "bg_party_02_02": [1011, 129],
    "bg_party_02_03": [1011, 193],
    "bg_party_02_04": [1011, 257],
    "bg_party_02_05": [1011, 321],
    "bg_party_02_06": [1011, 385],
    "bg_party_03_00": [1075, 1],
    "bg_party_03_01": [1075, 65],
    "bg_party_03_02": [1075, 129],
    "bg_party_03_03": [1075, 193],
    "bg_party_03_04": [1075, 257],
    "bg_party_03_05": [1075, 321],
    "bg_party_03_06": [1075, 385],
    "bg_party_04_00": [1139, 1],
    "bg_party_04_01": [1139, 65],
    "bg_party_04_02": [1139, 129],
    "bg_party_04_03": [1139, 193],
    "bg_party_04_04": [1139, 257],
    "bg_party_04_05": [1139, 321],
    "bg_party_04_06": [1139, 385],
    "bg_party_05_00": [1203, 1],
    "bg_party_05_01": [1203, 65],
    "bg_party_05_02": [1203, 129],
    "bg_party_05_03": [1203, 193],
    "bg_party_05_04": [1203, 257],
    "bg_party_05_05": [1203, 321],
    "bg_party_05_06": [1203, 385],
    "bg_party_06_00": [1267, 1],
    "bg_party_06_01": [1267, 65],
    "bg_party_06_02": [1267, 129],
    "bg_party_06_03": [1267, 193],
    "bg_party_06_04": [1267, 257],
    "bg_party_06_05": [1267, 321],
    "bg_party_06_06": [1267, 385],
    "bg_party_07_00": [1331, 1],
    "bg_party_07_01": [1331, 65],
    "bg_party_07_02": [1331, 129],
    "bg_party_07_03": [1331, 193],
    "bg_party_07_04": [1331, 257],
    "bg_party_07_05": [1331, 321],
    "bg_party_07_06": [1331, 385],

    "bg_shop_00_00": [369, 451],
    "bg_shop_00_01": [369, 515],
    "bg_shop_00_02": [369, 579],
    "bg_shop_00_03": [369, 643],
    "bg_shop_00_04": [369, 707],
    "bg_shop_00_05": [369, 771],
    "bg_shop_00_06": [369, 835],
    "bg_shop_01_00": [433, 451],
    "bg_shop_01_01": [433, 515],
    "bg_shop_01_02": [433, 579],
    "bg_shop_01_03": [433, 643],
    "bg_shop_01_04": [433, 707],
    "bg_shop_01_05": [433, 771],
    "bg_shop_01_06": [433, 835],
    "bg_shop_02_00": [497, 451],
    "bg_shop_02_01": [497, 515],
    "bg_shop_02_02": [497, 579],
    "bg_shop_02_03": [497, 643],
    "bg_shop_02_04": [497, 707],
    "bg_shop_02_05": [497, 771],
    "bg_shop_02_06": [497, 835],
    "bg_shop_03_00": [561, 451],
    "bg_shop_03_01": [561, 515],
    "bg_shop_03_02": [561, 579],
    "bg_shop_03_03": [561, 643],
    "bg_shop_03_04": [561, 707],
    "bg_shop_03_05": [561, 771],
    "bg_shop_03_06": [561, 835],
    "bg_shop_04_00": [625, 451],
    "bg_shop_04_01": [625, 515],
    "bg_shop_04_02": [625, 579],
    "bg_shop_04_03": [625, 643],
    "bg_shop_04_04": [625, 707],
    "bg_shop_04_05": [625, 771],
    "bg_shop_04_06": [625, 835],
    "bg_shop_05_00": [689, 451],
    "bg_shop_05_01": [689, 515],
    "bg_shop_05_02": [689, 579],
    "bg_shop_05_03": [689, 643],
    "bg_shop_05_04": [689, 707],
    "bg_shop_05_05": [689, 771],
    "bg_shop_05_06": [689, 835],
    "bg_shop_06_00": [753, 451],
    "bg_shop_06_01": [753, 515],
    "bg_shop_06_02": [753, 579],
    "bg_shop_06_03": [753, 643],
    "bg_shop_06_04": [753, 707],
    "bg_shop_06_05": [753, 771],
    "bg_shop_06_06": [753, 835],
    "bg_shop_07_00": [817, 451],
    "bg_shop_07_01": [817, 515],
    "bg_shop_07_02": [817, 579],
    "bg_shop_07_03": [817, 643],
    "bg_shop_07_04": [817, 707],
    "bg_shop_07_05": [817, 771],
    "bg_shop_07_06": [817, 835],

    "bg_school_00_00": [883, 451],
    "bg_school_00_01": [883, 515],
    "bg_school_00_02": [883, 579],
    "bg_school_00_03": [883, 643],
    "bg_school_00_04": [883, 707],
    "bg_school_00_05": [883, 771],
    "bg_school_00_06": [883, 835],
    "bg_school_01_00": [947, 451],
    "bg_school_01_01": [947, 515],
    "bg_school_01_02": [947, 579],
    "bg_school_01_03": [947, 643],
    "bg_school_01_04": [947, 707],
    "bg_school_01_05": [947, 771],
    "bg_school_01_06": [947, 835],
    "bg_school_02_00": [1011, 451],
    "bg_school_02_01": [1011, 515],
    "bg_school_02_02": [1011, 579],
    "bg_school_02_03": [1011, 643],
    "bg_school_02_04": [1011, 707],
    "bg_school_02_05": [1011, 771],
    "bg_school_02_06": [1011, 835],
    "bg_school_03_00": [1075, 451],
    "bg_school_03_01": [1075, 515],
    "bg_school_03_02": [1075, 579],
    "bg_school_03_03": [1075, 643],
    "bg_school_03_04": [1075, 707],
    "bg_school_03_05": [1075, 771],
    "bg_school_03_06": [1075, 835],
    "bg_school_04_00": [1139, 451],
    "bg_school_04_01": [1139, 515],
    "bg_school_04_02": [1139, 579],
    "bg_school_04_03": [1139, 643],
    "bg_school_04_04": [1139, 707],
    "bg_school_04_05": [1139, 771],
    "bg_school_04_06": [1139, 835],
    "bg_school_05_00": [1203, 451],
    "bg_school_05_01": [1203, 515],
    "bg_school_05_02": [1203, 579],
    "bg_school_05_03": [1203, 643],
    "bg_school_05_04": [1203, 707],
    "bg_school_05_05": [1203, 771],
    "bg_school_05_06": [1203, 835],
    "bg_school_06_00": [1267, 451],
    "bg_school_06_01": [1267, 515],
    "bg_school_06_02": [1267, 579],
    "bg_school_06_03": [1267, 643],
    "bg_school_06_04": [1267, 707],
    "bg_school_06_05": [1267, 771],
    "bg_school_06_06": [1267, 835],
    "bg_school_07_00": [1331, 451],
    "bg_school_07_01": [1331, 515],
    "bg_school_07_02": [1331, 579],
    "bg_school_07_03": [1331, 643],
    "bg_school_07_04": [1331, 707],
    "bg_school_07_05": [1331, 771],
    "bg_school_07_06": [1331, 835],

    "bg_school_00_00_shake": [883, 471],
    "bg_school_00_01_shake": [883, 535],
    "bg_school_00_02_shake": [883, 599],
    "bg_school_00_03_shake": [883, 663],
    "bg_school_00_04_shake": [883, 727],
    "bg_school_00_05_shake": [883, 791],
    "bg_school_00_06_shake": [883, 855],
    "bg_school_01_00_shake": [947, 471],
    "bg_school_01_01_shake": [947, 535],
    "bg_school_01_02_shake": [947, 599],
    "bg_school_01_03_shake": [947, 663],
    "bg_school_01_04_shake": [947, 727],
    "bg_school_01_05_shake": [947, 791],
    "bg_school_01_06_shake": [947, 855],
    "bg_school_02_00_shake": [1011, 471],
    "bg_school_02_01_shake": [1011, 535],
    "bg_school_02_02_shake": [1011, 599],
    "bg_school_02_03_shake": [1011, 663],
    "bg_school_02_04_shake": [1011, 727],
    "bg_school_02_05_shake": [1011, 791],
    "bg_school_02_06_shake": [1011, 855],
    "bg_school_03_00_shake": [1075, 471],
    "bg_school_03_01_shake": [1075, 535],
    "bg_school_03_02_shake": [1075, 599],
    "bg_school_03_03_shake": [1075, 663],
    "bg_school_03_04_shake": [1075, 727],
    "bg_school_03_05_shake": [1075, 791],
    "bg_school_03_06_shake": [1075, 855],
    "bg_school_04_00_shake": [1139, 471],
    "bg_school_04_01_shake": [1139, 535],
    "bg_school_04_02_shake": [1139, 599],
    "bg_school_04_03_shake": [1139, 663],
    "bg_school_04_04_shake": [1139, 727],
    "bg_school_04_05_shake": [1139, 791],
    "bg_school_04_06_shake": [1139, 855],
    "bg_school_05_00_shake": [1203, 471],
    "bg_school_05_01_shake": [1203, 535],
    "bg_school_05_02_shake": [1203, 599],
    "bg_school_05_03_shake": [1203, 663],
    "bg_school_05_04_shake": [1203, 727],
    "bg_school_05_05_shake": [1203, 791],
    "bg_school_05_06_shake": [1203, 855],
    "bg_school_06_00_shake": [1267, 471],
    "bg_school_06_01_shake": [1267, 535],
    "bg_school_06_02_shake": [1267, 599],
    "bg_school_06_03_shake": [1267, 663],
    "bg_school_06_04_shake": [1267, 727],
    "bg_school_06_05_shake": [1267, 791],
    "bg_school_06_06_shake": [1267, 855],
    "bg_school_07_00_shake": [1331, 471],
    "bg_school_07_01_shake": [1331, 535],
    "bg_school_07_02_shake": [1331, 599],
    "bg_school_07_03_shake": [1331, 663],
    "bg_school_07_04_shake": [1331, 727],
    "bg_school_07_05_shake": [1331, 791],
    "bg_school_07_06_shake": [1331, 855],

    "fade_to_black": [304, 835],

    "osef": [0, 0]
  }
}
--------
"""

Ce jeu était un cadeau pour les 40 ans de mon super-pote.

C'est un mini jeu d'aventures. Suivez les instructions affichées dans la console.

"""

I_WANT_TO_MOVE_EVERYWHERE = False

SCENE_WIDTH = 8
SCENE_HEIGHT = 7

PASSABLE_MAP_OUTSIDE = """
........
........
........
........
.+.+++++
++++++++
++++++++
"""

PASSABLE_MAP_SHOP = """
........
........
........
....+...
++++++..
++++++++
++++++++
"""

PASSABLE_MAP_PARTY = """
........
........
........
........
....++++
+...++++
++++++++
"""

PASSABLE_MAP_SCHOOL = """
........
........
........
........
........
++++++++
........
"""

def log_hint(text):
    print(text)

class SceneObject:
    def __init__(self, x, y, name):
        self.x = x
        self.y = y
        self.name = name
        self.current_gamobjs = []
        self.visible = True

    def move(self, move_x, move_y, passable_coords=None):
        new_x = self.x + move_x
        new_y = self.y + move_y
        if passable_coords is not None and (new_x, new_y) not in passable_coords:
            return
        self.x = new_x
        self.y = new_y

    def draw(self, func_get_tile):
        for gamobj, offset_x, offset_y in self.current_gamobjs:
            tile_to_add = func_get_tile(self.x + offset_x, self.y + offset_y)
            if tile_to_add is not None:
                tile_to_add.append(gamobj)


class Scene:
    def __init__(self, name, connectors=(), passable_map=None):
        self.name = name
        self.connectors = connectors
        self.ordered_scene_objects = []
        self.indexed_scene_objects = {}
        self.focused_scene_object = None
        if passable_map is None or I_WANT_TO_MOVE_EVERYWHERE:
            self.passable_coords = None
        else:
            self.passable_coords = self._compute_passable_coords(passable_map)

    def _compute_passable_coords(self, passable_map):
        passable_coords = []
        passable_map = passable_map.strip()
        for y, line in enumerate(passable_map.split("\n")):
            line_stripped = line.strip()
            for x, char in enumerate(line_stripped):
                if char == "+":
                    passable_coords.append((x, y))
        return tuple(passable_coords)

    def add_object(self, scene_object):
        self.ordered_scene_objects.append(scene_object)
        obj_name = scene_object.name
        if obj_name in self.indexed_scene_objects:
            raise Exception(
                f"Ajout de plusieurs scene objets ayant le même nom, not supposed to happen. {obj_name}"
            )
        self.indexed_scene_objects[obj_name] = scene_object

    def set_focused_object(self, obj_name):
        if obj_name not in self.indexed_scene_objects:
            raise Exception(
                f"Scene object non présent dans la scène. Not supposed to happen. {obj_name}"
            )
        self.focused_scene_object = self.indexed_scene_objects[obj_name]

    def get_connected_scene(self, move_dir):
        if self.focused_scene_object is None:
            return None
        check_tuple = self.focused_scene_object.x, self.focused_scene_object.y, move_dir
        for conn_x, conn_y, expected_dir, conn_dest in self.connectors:
            if check_tuple == (conn_x, conn_y, expected_dir):
                return conn_dest
        return None


class Background(SceneObject):
    def __init__(self, name):
        super().__init__(0, 0, name)
        self.array_gamobjs = []
        for y in range(SCENE_HEIGHT):
            line_gamobjs = []
            for x in range(SCENE_WIDTH):
                line_gamobjs.append(f"bg_{self.name}_{x:02}_{y:02}")
            self.array_gamobjs.append(line_gamobjs)

    def draw(self, func_get_tile):
        for y in range(SCENE_HEIGHT):
            for x in range(SCENE_WIDTH):
                func_get_tile(x, y).append(self.array_gamobjs[y][x])


class BackBlack(SceneObject):
    def __init__(self, name):
        super().__init__(0, 0, name)

    def draw(self, func_get_tile):
        for y in range(SCENE_HEIGHT):
            for x in range(SCENE_WIDTH):
                func_get_tile(x, y).append("bg_black")


class Text(SceneObject):
    def __init__(self, x, y, text_name, tile_length):
        super().__init__(x, y, "text_" + text_name)
        self.tile_length = tile_length

    def draw(self, func_get_tile):
        for index_tile in range(self.tile_length):
            func_get_tile(self.x + index_tile, self.y).append(
                f"{self.name}_{index_tile}"
            )


class ShopTable(SceneObject):

    GAMOBJS_NORMAL = (
        ("shop_table_pole", 0, 0),
        ("shop_table_plank", 1, 0),
        ("shop_table_pole", 2, 0),
    )

    def __init__(self, x, y):
        super().__init__(x, y, "shop_table")
        self.current_gamobjs = ShopTable.GAMOBJS_NORMAL


class SimpleObjectOneSquare(SceneObject):
    def __init__(self, x, y, name, gamobj_name=None, visible=True):
        super().__init__(x, y, name)
        self.visible = visible
        if gamobj_name is None:
            gamobj_name = name
        gamobjs_normal = ((gamobj_name, 0, 0),)
        self.current_gamobjs = gamobjs_normal


class TakeableObject(SceneObject):
    def __init__(self, x, y, name, gamobj_laid, gamobj_held):
        super().__init__(x, y, name)
        self.visible = False
        self.gamobjs_laid = gamobj_laid
        self.gamobjs_held = gamobj_held
        self.hold()

    def _update_gamobjs(self):
        self.current_gamobjs = self.gamobjs_laid if self.is_laid else self.gamobjs_held

    def lay(self):
        self.is_laid = True
        self.visible = True
        self._update_gamobjs()

    def hold(self):
        self.is_laid = False
        self.visible = False
        self._update_gamobjs()


class BuffoonCap(TakeableObject):

    GAMOBJS_LAID = (("buffoon_cap_centered", 0, 0),)

    GAMOBJS_HELD = (
        ("buffoon_cap_1", 0, 0),
        ("buffoon_cap_2", 0, -1),
    )

    def __init__(self, x, y):
        super().__init__(
            x, y, "buffoon_cap", BuffoonCap.GAMOBJS_LAID, BuffoonCap.GAMOBJS_HELD
        )


class BuffoonScepter(TakeableObject):

    GAMOBJS_LAID = (("buffoon_scepter_centered", 0, 0),)

    GAMOBJS_HELD = (
        ("buffoon_scepter_1", 0, 0),
        ("buffoon_scepter_2", 0, -1),
    )

    def __init__(self, x, y):
        super().__init__(
            x,
            y,
            "buffoon_scepter",
            BuffoonScepter.GAMOBJS_LAID,
            BuffoonScepter.GAMOBJS_HELD,
        )


class PlasticSword(TakeableObject):

    GAMOBJS_LAID = (("plastic_sword_centered", 0, 0),)

    GAMOBJS_HELD = (
        ("plastic_sword_1", 0, 0),
        ("plastic_sword_2", 0, -1),
    )

    def __init__(self, x, y):
        super().__init__(
            x,
            y,
            "plastic_sword",
            PlasticSword.GAMOBJS_LAID,
            PlasticSword.GAMOBJS_HELD,
        )


class BuffoonCapOnHead(SceneObject):

    GAMOBJS_NORMAL = (
        ("buffoon_cap_1", 0, 0),
        ("buffoon_cap_2", 0, -1),
    )

    def __init__(self, x, y):
        super().__init__(x, y, "buffoon_cap_on_head")
        self.current_gamobjs = BuffoonCapOnHead.GAMOBJS_NORMAL
        self.visible = False


class SchoolPole(SceneObject):

    GAMOBJS_NORMAL = (
        ("school_pole_1", 0, 0),
        ("school_pole_2", 0, -1),
        ("school_pole_3", 0, -2),
        ("school_pole_4", 0, -3),
        ("school_pole_4", 0, -4),
        ("school_pole_4", 0, -5),
    )

    def __init__(self, x, y):
        super().__init__(x, y, "school_pole")
        self.current_gamobjs = SchoolPole.GAMOBJS_NORMAL


class UrlAds(SceneObject):

    GAMOBJS_NORMAL = (
        ("url_ads_0", 0, 0),
        ("url_ads_1", 1, 0),
        ("url_ads_2", 2, 0),
        ("url_ads_3", 3, 0),
        ("url_ads_4", 4, 0),
        ("url_ads_5", 5, 0),
    )

    def __init__(self, x, y):
        super().__init__(x, y, "url_ads")
        self.current_gamobjs = UrlAds.GAMOBJS_NORMAL
        self.visible = False


class GiftMcDo(SceneObject):

    GAMOBJS_NORMAL = (
        ("gift_mcdo_1", 0, 0),
        ("gift_mcdo_2", 0, -1),
    )

    def __init__(self, x, y):
        super().__init__(x, y, "gift_mcdo")
        self.current_gamobjs = GiftMcDo.GAMOBJS_NORMAL
        self.visible = False


class CharacterMe(SceneObject):

    GAMOBJS_NORMAL = (
        ("me_head", 0, -2),
        ("me_torso_norm", 0, -1),
        ("me_legs", 0, 0),
    )

    GAMOBJS_OFFER = (
        ("me_head", 0, -2),
        ("me_torso_offer_1", 0, -1),
        ("me_torso_offer_2", -1, -1),
        ("me_legs", 0, 0),
    )

    def __init__(self, x, y):
        super().__init__(x, y, "me")
        self.set_offer(False)

    def set_offer(self, is_offering):
        self.is_offering = is_offering
        self.current_gamobjs = (
            CharacterMe.GAMOBJS_OFFER
            if self.is_offering
            else CharacterMe.GAMOBJS_NORMAL
        )


class CharacterPote(SceneObject):

    GAMOBJS_NORMAL = (
        ("pote_over_head", 0, -3),
        ("pote_head_smile", 0, -2),
        ("pote_torso_norm", 0, -1),
        ("pote_legs", 0, 0),
    )

    GAMOBJS_OFFER = (
        ("pote_over_head", 0, -3),
        ("pote_head_smile", 0, -2),
        ("pote_torso_offer_1", 0, -1),
        ("pote_torso_offer_2a", 1, -1),
        ("pote_torso_offer_2b", 1, -2),
        ("pote_legs", 0, 0),
    )

    def __init__(self, x, y):
        super().__init__(x, y, "pote")
        self.current_gamobjs = list(CharacterPote.GAMOBJS_NORMAL)
        # Et zut. Obligé de définir cette variable à cause de dépendance circulaire. Tant pis.
        self.is_smiling = True
        self.held_object = None
        self.set_offer(False)
        self.set_smile(True)

    def _update_smile(self):
        # FUTURE : Il y a un bug visuel quand le pote ne smile pas, n'offre pas, et que ça shake.
        # Et aussi quand le pote smile, offre, et que ça shake. Pas le temps de corriger.
        gamobj_head = "pote_head_smile" if self.is_smiling else "pote_head"
        self.current_gamobjs[1] = (gamobj_head, 0, -2)

    def move(self, move_x, move_y, passable_coords=None):
        if self.is_offering:
            self.set_offer(False)
        super().move(move_x, move_y, passable_coords)

    def set_held_object(self, held_object):
        self.held_object = held_object

    def set_offer(self, is_offering):
        self.is_offering = is_offering
        gamobjs = (
            CharacterPote.GAMOBJS_OFFER
            if self.is_offering
            else CharacterPote.GAMOBJS_NORMAL
        )
        self.current_gamobjs = list(gamobjs)
        self._update_smile()

        if self.held_object is not None:
            if self.is_offering:
                self.held_object.visible = True
                self.held_object.x = self.x + 1
                self.held_object.y = self.y - 1
            else:
                self.held_object.visible = False

    def set_smile(self, is_smiling):
        self.is_smiling = is_smiling
        self._update_smile()


class CharacterMonsieurR(SceneObject):

    GAMOBJS_NORMAL = (
        ("R_norm_00_00", 0, -5),
        ("R_norm_00_01", 0, -4),
        ("R_norm_00_02", 0, -3),
        ("R_norm_00_03", 0, -2),
        ("R_norm_00_04", 0, -1),
        ("R_norm_00_05", 0, 0),
        ("R_norm_01_00", 1, -5),
        ("R_norm_01_01", 1, -4),
        ("R_norm_01_02", 1, -3),
        ("R_norm_01_03", 1, -2),
        ("R_norm_01_04", 1, -1),
        ("R_norm_01_05", 1, 0),
    )

    GAMOBJS_ANGRY = (
        ("R_angry_00_00", 0, -6),
        ("R_angry_00_01", 0, -5),
        ("R_angry_00_02", 0, -4),
        ("R_angry_00_03", 0, -3),
        ("R_angry_00_04", 0, -2),
        ("R_angry_00_05", 0, -1),
        ("R_angry_00_06", 0, 0),
        ("R_angry_01_00", 1, -6),
        ("R_angry_01_01", 1, -5),
        ("R_angry_01_02", 1, -4),
        ("R_angry_01_03", 1, -3),
        ("R_angry_01_04", 1, -2),
        ("R_angry_01_05", 1, -1),
        ("R_angry_01_06", 1, 0),
    )

    def __init__(self, x, y):
        super().__init__(x, y, "monsieur_R")
        self.is_flying = False
        self.trigger_shake = False
        self.is_angry = False
        self._set_current_gamobjs()

    def _set_current_gamobjs(self):
        self.current_gamobjs = [
            CharacterMonsieurR.GAMOBJS_NORMAL,
            CharacterMonsieurR.GAMOBJS_ANGRY,
        ][int(self.is_angry)]

    def move(self, move_x, move_y, passable_coords=None):
        if not self.is_flying:
            if not move_x and move_y == -1:
                super().move(move_x, move_y)
                self.is_flying = True
        else:
            if move_y >= 0:
                super().move(move_x, move_y)
                if move_y:
                    self.is_flying = False
                    self.trigger_shake = GameModel.DA_SHAKE_DOING
                else:
                    self.trigger_shake = GameModel.DA_SHAKE_START

    def toggle_angry(self):
        self.is_angry = not self.is_angry
        self._set_current_gamobjs()


class Inventory(SceneObject):

    GAMOBJ_FROM_HELD_OBJECT_NAME = {
        "buffoon_cap": "buffoon_cap_centered",
        "buffoon_scepter": "buffoon_scepter_centered",
        "plastic_sword": "plastic_sword_centered",
        "gift_mcdo": "gift_mcdo_centered",
    }

    def __init__(self, x, y):
        super().__init__(x, y, "inventory")
        self.held_object_name = None

    def set_held_object_name(self, held_object_name):
        self.held_object_name = held_object_name

    def remove_held_object(self):
        self.held_object_name = None

    def draw(self, func_get_tile):
        if self.held_object_name is not None:
            gamobj = Inventory.GAMOBJ_FROM_HELD_OBJECT_NAME[self.held_object_name]
            func_get_tile(self.x, self.y).append("inventory_interface")
            func_get_tile(self.x, self.y).append(gamobj)


class GameModel:

    FADE_TO_BLACK_QTY = 5
    DA_CHANGE_SCENE_DOING = """
        { "delayed_actions": [ {"name": "change_scene", "delay_ms": 70} ], "player_locks": ["change_scene"] }
    """
    DA_CHANGE_SCENE_DONE = """{ "player_unlocks": ["change_scene"] }"""
    SHAKE_QTY = 10
    DA_SHAKE_START = """
        { "delayed_actions": [ {"name": "shake", "delay_ms": 200} ], "player_locks": ["shake"] }
    """
    DA_SHAKE_DOING = """
        { "delayed_actions": [ {"name": "shake", "delay_ms": 90} ], "player_locks": ["shake"] }
    """
    DA_SHAKE_DONE = """{ "player_unlocks": ["shake"] }"""
    # FUTURE : truc à ajouter dans squarity :
    # " return GameModel.DA_SHAKE_DONE + GameModel.DA_CHANGE_SCENE_DOING"
    DA_SHAKE_DONE_CHANGE_SCENE = """
        { "delayed_actions": [ {"name": "change_scene", "delay_ms": 70} ], "player_locks": ["change_scene"], "player_unlocks": ["shake"] }
    """
    DA_SHAKE_START_POTE_FLEES = """
        { "delayed_actions": [ {"name": "shake", "delay_ms": 200}, {"name": "pote_flees", "delay_ms": 300} ], "player_locks": ["shake"] }
    """
    DA_POTE_FLEES = """
        { "delayed_actions": [ {"name": "pote_flees", "delay_ms": 300} ] }
    """
    DA_GIVE_GIFT_TO_POTE = """
        { "delayed_actions": [ {"name": "give_gift_to_pote", "delay_ms": 800} ], "player_locks": ["give_gift"] }
    """
    DA_GIVE_GIFT_TO_POTE_DONE = """{ "player_unlocks": ["give_gift"] }"""

    def get_tile(self, x, y):
        if 0 <= x < self.w and 0 <= y < self.h:
            return self.tiles[y][x]
        else:
            return None

    def __init__(self):
        self.w = SCENE_WIDTH
        self.h = SCENE_HEIGHT

        self.init_all_scenes()

        self.current_scene = self.scenes["outside"]
        self.next_scene = None
        self.special_effect_fade_to_black = 0
        self.special_effect_shake = False
        self.shake_counter = 0

    def init_all_scenes(self):
        outside_connectors = (
            (1, 4, "U", "shop"),
            (7, 4, "U", "party"),
        )
        scene_outside = Scene("outside", outside_connectors, PASSABLE_MAP_OUTSIDE)
        scene_outside.add_object(Background("outside"))
        scene_outside.add_object(CharacterMe(4, 5))
        # On est obligé de créer les 3 objets prenables, dans chacune des scènes.
        # Ça fait 9 objets. Car c'est le seul moyen pour pouvoir sortir l'objet de sa poche
        # depuis n'importe quelle scène. C'est tout pourri, mais pas le temps.
        scene_outside.add_object(BuffoonCap(0, 0))
        scene_outside.add_object(BuffoonScepter(0, 0))
        scene_outside.add_object(PlasticSword(0, 0))
        scene_outside.set_focused_object("me")

        party_connectors = (
            (7, 6, "R", "outside"),
            (7, 5, "R", "outside"),
            (7, 4, "R", "outside"),
        )
        scene_party = Scene("party", party_connectors, PASSABLE_MAP_PARTY)
        scene_party.add_object(Background("party"))
        scene_party.add_object(
            SimpleObjectOneSquare(5, 4, "buffoon_scepter_dark", visible=False)
        )
        scene_party.add_object(SimpleObjectOneSquare(3, 4, "candle_blu", visible=False))
        scene_party.add_object(SimpleObjectOneSquare(2, 4, "candle_pnk", visible=False))
        scene_party.add_object(SimpleObjectOneSquare(3, 4, "candle_grn"))
        scene_party.add_object(CharacterPote(1, 5))
        scene_party.add_object(CharacterMe(7, 5))
        scene_party.add_object(BuffoonCap(0, 0))
        scene_party.add_object(BuffoonScepter(0, 0))
        scene_party.add_object(PlasticSword(0, 0))
        scene_party.add_object(BuffoonCapOnHead(1, 3))
        scene_party.set_focused_object("me")

        shop_connectors = ((4, 3, "U", "outside"),)
        scene_shop = Scene("shop", shop_connectors, PASSABLE_MAP_SHOP)
        scene_shop.add_object(Background("shop"))
        scene_shop.add_object(CharacterMe(4, 3))
        scene_shop.add_object(ShopTable(0, 6))
        scene_shop.add_object(BuffoonCap(1, 5))
        scene_shop.add_object(BuffoonScepter(1, 5))
        scene_shop.add_object(PlasticSword(1, 5))
        scene_shop.set_focused_object("me")

        scene_school = Scene("school", passable_map=PASSABLE_MAP_SCHOOL)
        scene_school.add_object(Background("school"))
        scene_school.add_object(UrlAds(1, 0))
        gift_mcdo = GiftMcDo(0, 0)
        scene_school.add_object(gift_mcdo)
        pote = CharacterPote(0, 5)
        scene_school.add_object(pote)
        pote.set_held_object(gift_mcdo)
        scene_school.add_object(CharacterMonsieurR(9, 5))
        scene_school.add_object(SchoolPole(6, 5))
        scene_school.set_focused_object("pote")

        scene_text = Scene("text")
        scene_text.add_object(BackBlack("black"))
        scene_text.add_object(Text(2, 2, "one_year", 3))
        scene_text.add_object(Text(2, 3, "earlier", 4))
        scene_text.add_object(Text(2, 3, "later", 4))
        scene_text.add_object(Text(0, 2, "many_years", 8))

        self.inventory = Inventory(0, 0)

        scenes = (scene_outside, scene_party, scene_shop, scene_school, scene_text)
        self.scenes = {scene.name: scene for scene in scenes}
        self.restart_story = False
        self.hinted_switch_char = False
        self.hinted_give_mcdo = False
        self.hinted_r = False
        log_hint("Find a present for your friend,")
        log_hint("then push the button '1' to take it.")

        self.global_advancement = 0
        self.state_give_gift = 0
        self.dance_counter = 0
        self.apply_global_advancement()

    def is_gamobj_shakable(self, gamobj_name):
        authorized_prefixes = [
            "bg_school_",
            "pote_",
            "R_norm_",
            "R_angry_",
            "gift_mcdo_1",
            "gift_mcdo_2",
            "school_pole_",
        ]
        for prefix in authorized_prefixes:
            if gamobj_name.startswith(prefix):
                return True
        return False

    def export_all_tiles(self):

        self.tiles = []
        for y in range(self.h):
            line = []
            for x in range(self.w):
                line.append([])
            self.tiles.append(line)

        for scene_obj in self.current_scene.ordered_scene_objects:
            if scene_obj.visible:
                scene_obj.draw(self.get_tile)

        self.inventory.draw(self.get_tile)

        if self.special_effect_shake:
            for y in range(self.h):
                for x in range(self.w):
                    current_tile = self.tiles[y][x]
                    current_tile = [
                        gamobj + "_shake" if self.is_gamobj_shakable(gamobj) else gamobj
                        for gamobj in current_tile
                    ]
                    self.tiles[y][x] = current_tile

        if self.special_effect_fade_to_black:
            for y in range(self.h):
                for x in range(self.w):
                    self.tiles[y][x].extend(
                        ["fade_to_black"] * self.special_effect_fade_to_black
                    )

        return self.tiles

    def handle_change_scene(self):
        if self.next_scene is not None:

            self.special_effect_fade_to_black += 1
            if self.special_effect_fade_to_black == GameModel.FADE_TO_BLACK_QTY:
                if self.restart_story:
                    # Rien à foutre là ça. Osef.
                    self.init_all_scenes()
                    self.current_scene = self.scenes["outside"]
                    self.next_scene = None
                    self.restart_story = False
                else:
                    # Rien à foutre là non plus.
                    if self.global_advancement == 9:
                        self.inventory.set_held_object_name("gift_mcdo")
                    self.current_scene = self.next_scene
                    self.next_scene = None
            return GameModel.DA_CHANGE_SCENE_DOING

        else:

            self.special_effect_fade_to_black -= 1
            if self.special_effect_fade_to_black:
                return GameModel.DA_CHANGE_SCENE_DOING
            else:
                # Ajout de code super spécifique et super dégueu
                # dans une fonction qui se voulait générique.
                if self.global_advancement == 2 and self.current_scene.name == "text":
                    log_hint("")
                    log_hint("")
                    log_hint("Press any direction button.")
                if self.current_scene.name == "school":
                    log_hint("")
                    log_hint("")
                    log_hint("Now, you have control of the friend,")
                    log_hint("and the French teacher.")
                    log_hint("Press the button '2' to switch character.")
                return GameModel.DA_CHANGE_SCENE_DONE

    def handle_shake(self):
        monsieur_r = self.current_scene.indexed_scene_objects.get("monsieur_R")
        if monsieur_r is not None and monsieur_r.is_flying:
            monsieur_r.move(0, 1)
            # Truc qui devrait pas être là parce que cette fonction ne devrait gérer que le shake,
            # et pas monsieur R. Mais pas le temps.
            if monsieur_r.x == 1:
                url_ads = self.current_scene.indexed_scene_objects.get("url_ads")
                if url_ads is not None:
                    url_ads.visible = True
            return GameModel.DA_SHAKE_DOING

        self.shake_counter += 1
        if self.shake_counter < GameModel.SHAKE_QTY:
            self.special_effect_shake = not self.special_effect_shake
            return GameModel.DA_SHAKE_DOING
        else:
            if self.special_effect_shake:
                self.special_effect_shake = False
                return GameModel.DA_SHAKE_DOING
            else:
                self.shake_counter = 0
                if monsieur_r is not None:
                    monsieur_r.trigger_shake = None
                # Vérif spéciale pour recommencer tout le jeu à zéro.
                # Ça non plus, ça ne devrait pas être ici, pas le temps de faire plus propre.
                if monsieur_r.x >= -1:
                    return GameModel.DA_SHAKE_DONE
                else:
                    self.next_scene = self.scenes["outside"]
                    self.restart_story = True
                    return GameModel.DA_SHAKE_DONE_CHANGE_SCENE

    def handle_pote_flees(self):
        pote = self.current_scene.indexed_scene_objects.get("pote")
        if pote is not None:
            pote.move(-1, 0)
            if pote.x >= 0:
                return GameModel.DA_POTE_FLEES
            else:
                self.inventory.remove_held_object()
                log_hint("")
                log_hint("")
                log_hint("Congratulations, you finished the story !")
                log_hint("To start over, move the teacher to the left, out of the screen.")
                return None

    def handle_give_gift_to_pote(self):
        if self.state_give_gift == 0:
            pote = self.current_scene.indexed_scene_objects.get("pote")
            if pote is not None:
                pote.set_offer(True)

        if self.state_give_gift == 1:
            gift_name = self.inventory.held_object_name
            gift = self.current_scene.indexed_scene_objects.get(gift_name)
            if gift is not None:
                gift.move(-1, 0)
            self.inventory.remove_held_object()

        if self.state_give_gift == 2:
            pote = self.current_scene.indexed_scene_objects.get("pote")
            if pote is not None:
                pote.set_smile(False)

        if self.state_give_gift == 3:
            obj_me = self.current_scene.indexed_scene_objects.get("me")
            if obj_me is not None:
                obj_me.set_offer(False)

        self.state_give_gift += 1
        if self.state_give_gift <= 3:
            return GameModel.DA_GIVE_GIFT_TO_POTE
        else:
            self.global_advancement += 1
            if self.global_advancement == 1:
                log_hint("")
                log_hint("")
                log_hint("Jump 4 times by pressing the 'up' button,")
                log_hint("and be happy at the party !")
            return GameModel.DA_GIVE_GIFT_TO_POTE_DONE

    def set_offer_me(self, focused_obj, is_offering):
        if is_offering == focused_obj.is_offering:
            return

        if self.inventory.held_object_name is None:
            return
        held_object = self.current_scene.indexed_scene_objects.get(
            self.inventory.held_object_name
        )
        if held_object is None:
            return

        focused_obj.set_offer(is_offering)
        if is_offering:
            held_object.visible = True
            held_object.x = focused_obj.x - 1
            held_object.y = focused_obj.y - 1
        else:
            held_object.visible = False

    def apply_global_advancement(self):

        if self.global_advancement in (0, 3, 6):

            obj_names_to_lay = {
                0: "buffoon_cap",
                3: "buffoon_scepter",
                6: "plastic_sword",
            }
            obj_names_to_hide = {
                0: None,
                3: "buffoon_cap",
                6: "buffoon_scepter",
            }
            obj_name_to_lay = obj_names_to_lay[self.global_advancement]
            # Pas de fonction dict.get. Je récupère directement les infos.
            # Si les objets sont pas présents sur la scène, ça plantera. Osef.
            obj_to_lay = self.scenes["shop"].indexed_scene_objects[obj_name_to_lay]
            obj_to_lay.lay()

            obj_name_to_hide = obj_names_to_hide[self.global_advancement]
            if obj_name_to_hide is not None:
                for scene_name in ("shop", "outside", "party"):
                    obj_to_hide = self.scenes[scene_name].indexed_scene_objects[
                        obj_name_to_hide
                    ]
                    obj_to_hide.visible = False

            me_outside = self.scenes["outside"].indexed_scene_objects["me"]
            me_outside.x = 4
            me_outside.y = 5
            me_party = self.scenes["party"].indexed_scene_objects["me"]
            me_party.x = 7
            me_party.y = 5
            pote = self.scenes["party"].indexed_scene_objects["pote"]
            pote.set_smile(True)
            pote.set_offer(False)

            self.state_give_gift = 0
            self.dance_counter = 0

            if self.global_advancement == 3:
                buffoon_cap_on_head = self.scenes["party"].indexed_scene_objects[
                    "buffoon_cap_on_head"
                ]
                buffoon_cap_on_head.visible = True
                candle_pink = buffoon_cap_on_head = self.scenes[
                    "party"
                ].indexed_scene_objects["candle_pnk"]
                candle_pink.visible = True
                log_hint("")
                log_hint("")
                log_hint("Another year, another birthday.")
                log_hint("Do the same thing.")

            if self.global_advancement == 6:
                buffoon_scepter_dark = self.scenes["party"].indexed_scene_objects[
                    "buffoon_scepter_dark"
                ]
                buffoon_scepter_dark.visible = True
                candle_blu = buffoon_cap_on_head = self.scenes[
                    "party"
                ].indexed_scene_objects["candle_blu"]
                candle_blu.visible = True

            self.next_scene = self.scenes["outside"]
            return GameModel.DA_CHANGE_SCENE_DOING

        elif self.global_advancement in (2, 5, 8):

            scene_text = self.scenes["text"]

            all_text_names = ("one_year", "earlier", "later", "many_years")
            visible_texts_per_advancement = {
                2: ("one_year", "later"),
                5: ("many_years", "later"),
                8: ("many_years", "earlier"),
            }
            visible_texts = visible_texts_per_advancement[self.global_advancement]
            for text_name in all_text_names:
                visible = text_name in visible_texts
                scene_text.indexed_scene_objects["text_" + text_name].visible = visible

            self.next_scene = scene_text
            return GameModel.DA_CHANGE_SCENE_DOING

        if self.global_advancement == 9:
            self.next_scene = self.scenes["school"]
            return GameModel.DA_CHANGE_SCENE_DOING

    def on_game_event(self, event_name):
        # Toute la gestion de la game logic est en dur là dedans, à l'arrache.
        # Pas le temps de faire mieux.

        move_coords = squarity.MOVE_FROM_DIR.get(event_name)
        focused_obj = self.current_scene.focused_scene_object

        if self.current_scene.name == "school":
            pote = self.current_scene.indexed_scene_objects.get("pote")

        if move_coords is not None:

            if self.current_scene.name == "text":
                self.global_advancement += 1
                return self.apply_global_advancement()

            if self.global_advancement in (1, 4, 7):
                if move_coords == [0, -1]:
                    self.dance_counter += 1
                    if self.dance_counter == 4:
                        self.dance_counter = 0
                        self.global_advancement += 1
                        return self.apply_global_advancement()

            if focused_obj is not None:

                if focused_obj.name == "me":
                    self.set_offer_me(focused_obj, False)

                next_scene_name = self.current_scene.get_connected_scene(event_name)
                if next_scene_name is not None:
                    self.next_scene = self.scenes[next_scene_name]
                    return GameModel.DA_CHANGE_SCENE_DOING
                else:
                    focused_obj.move(
                        move_coords[0],
                        move_coords[1],
                        self.current_scene.passable_coords,
                    )

                if self.current_scene.name == "school":
                    if focused_obj.name == "monsieur_R":
                        if focused_obj.x == 6 and not self.hinted_give_mcdo:
                            log_hint("")
                            log_hint("")
                            log_hint("Take control of the friend,")
                            log_hint("press the button '1' to offer the present.")
                            self.hinted_give_mcdo = True
                        if focused_obj.trigger_shake:
                            # Ouh le vilain code super crade !
                            if pote is not None and pote.x == focused_obj.x:
                                pote.move(-1, 0)
                                return GameModel.DA_SHAKE_START_POTE_FLEES
                            else:
                                return focused_obj.trigger_shake

        elif event_name == "action_1":
            if self.current_scene.name == "school":
                if focused_obj is not None:
                    if focused_obj.name == "monsieur_R":
                        focused_obj.toggle_angry()
                        if focused_obj.is_angry:
                            if pote is not None:
                                pote.set_offer(False)
                    elif focused_obj.name == "pote":
                        if self.hinted_give_mcdo and not self.hinted_r:
                            log_hint("")
                            log_hint("")
                            log_hint("Re-take control of the teacher, get nervous by pressing '1'.")
                            log_hint("Walk to the friend to make him flee.")
                            self.hinted_r = True
                        focused_obj.set_offer(not focused_obj.is_offering)
            else:
                if focused_obj is not None:
                    if self.inventory.held_object_name is None:
                        for scene_object in self.current_scene.ordered_scene_objects:
                            if (
                                isinstance(scene_object, TakeableObject)
                                and scene_object.is_laid
                                and scene_object.x == focused_obj.x
                                and scene_object.y == focused_obj.y - 1
                            ):
                                self.inventory.set_held_object_name(scene_object.name)
                                scene_object.hold()
                                if scene_object.name == "buffoon_cap":
                                    log_hint("")
                                    log_hint("")
                                    log_hint("Great ! Now go at your friend's house,")
                                    log_hint("give him the present by pressing '1'.")

                    else:
                        is_offering_new = not focused_obj.is_offering
                        self.set_offer_me(focused_obj, is_offering_new)
                        if (
                            is_offering_new
                            and self.current_scene.name == "party"
                            and focused_obj.x == 4
                            and focused_obj.y == 5
                        ):
                            return GameModel.DA_GIVE_GIFT_TO_POTE

        elif event_name == "action_2":
            if self.current_scene.name == "school":
                if focused_obj.name == "pote":
                    if not self.hinted_switch_char:
                        log_hint("")
                        log_hint("")
                        log_hint("The teacher does not move like a normal person.")
                        log_hint("Press the buttons 'up' then 'left', many times.")
                        self.hinted_switch_char = True
                    next_focus = "monsieur_R"
                else:
                    next_focus = "pote"
                self.current_scene.set_focused_object(next_focus)

        elif event_name == "change_scene":
            return self.handle_change_scene()

        elif event_name == "shake":
            return self.handle_shake()

        elif event_name == "pote_flees":
            return self.handle_pote_flees()

        elif event_name == "give_gift_to_pote":
            return self.handle_give_gift_to_pote()

