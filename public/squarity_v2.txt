import js
import sys


# Technique pour rediriger les prints. Emprunté à Brython, mais ça marche aussi avec pyodide.
# https://stackoverflow.com/questions/61348313/how-can-i-redirect-all-brython-output-to-a-textarea-element
class MyOutput:
    def __init__(self):
        # https://pyodide.readthedocs.io/en/latest/using_pyodide_from_javascript.html
        self.python_console = js.document.getElementById("pythonConsole")

    def write(self, text):
        self.python_console.textContent += text
        self.python_console.scrollTop = self.python_console.scrollHeight

sys.stdout = MyOutput()


class Direction():
    def __init__(self, int_dir, str_dir, vector):
        self.int_dir = int_dir
        self.str_dir = str_dir
        self.vector = vector
        self.turned_cw = [None] * 8
        self.turned_ccw = [None] * 8

    def set_turned(self, turned_cw):
        self.turned_cw = turned_cw
        self.turned_ccw = self.turned_cw[::-1]
        self.opposite = self.turned_cw[4]

    def turn_cw(self, n=2):
        return self.turned_cw[n % 8]

    def turn_ccw(self, n=2):
        return self.turned_ccw[n % 8]

    def __eq__(self, other):
        return self.int_dir == other.int_dir

    def __int__(self):
        return self.int_dir

    def __repr__(self):
        return self.str_dir


class Directions():
    def __init__(self):
        self.Up = Direction(0, "up", (0, -1))
        self.UpRight = Direction(1, "up_right", (+1, -1))
        self.Right = Direction(2, "right", (+1, 0))
        self.DownRight = Direction(3, "down_right", (+1, +1))
        self.Down = Direction(4, "down", (0, +1))
        self.DownLeft = Direction(5, "down_left", (-1, +1))
        self.Left = Direction(6, "left", (-1, 0))
        self.UpLeft = Direction(7, "up_left", (-1, -1))
        self.as_list = [
            self.Up, self.UpRight, self.Right, self.DownRight,
            self.Down, self.DownLeft, self.Left, self.UpLeft,
        ]
        turns = list(self.as_list)
        for direc in self.as_list:
            direc.set_turned(turns)
            turns = turns[1:] + turns[:1]

dirs = Directions()


class Coord:

    def __init__(self, x=None, y=None, coord=None):
        if coord is not None:
            self.x = coord.x
            self.y = coord.y
        else:
            self.x = x
            self.y = y
        if self.x is None or self.y is None:
            raise ValueError("Coord must be initialized with x and y or coord.")

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __hash__(self):
        return hash((self.x, self.y))

    def __repr__(self):
        return f"<Coord {self.x}, {self.y} >"

    def clone(self):
        return Coord(coord=self)

    def move_dir(self, direction, dist=1):
        mov_x, mov_y = direction.vector
        self.x += mov_x * dist
        self.y += mov_y * dist
        return self

    def move_by_vect(self, vector=None, x=None, y=None):
        if vector is not None:
            self.x += vector.x
            self.y += vector.y
        if x is not None:
            self.x += x
        if y is not None:
            self.y += y
        return self


class TransitionSteps():
    """
    La variable field_name peut être "coord" ou "sprite_name"
    Ensuite, on indique une liste de tuples (delay, valeur).
    Pour indiquer une callback, il faut mettre un objet squarity.Callback
    """
    def __init__(self, field_name, steps):
        self.field_name = field_name
        self.steps = steps


class PlayerLockTransi():
    NO_LOCK = 0
    INVISIBLE = 1
    LOCK = 2


class GameObjectBase():
    def __init__(self):
        self._go_id = id(self)


class GameObject(GameObjectBase):

    # FUTURE: on ajoutera deux booléens: isTransitionable, isVisualEffectable.
    # Selon ces deux valeurs, il y a, ou pas, des composants pour gérer les transitions et les effets visuels.
    # Ce sera moins dégueux qu'actuellement, où y'a des variables de partout.
    # On ne pourra pas changer ces deux booléens après instanciation.
    # Si on veut un objet qui se transitionne, on détruit l'ancien et on recrée un transitionable,
    # et puis c'est tout.
    # (Trouver un autre nom que "isVisualEffectable").
    def __init__(self, coord, sprite_name, layer_owner=None):
        super().__init__()
        self._coord = Coord(coord=coord)
        self.sprite_name = sprite_name
        self.layer_owner = layer_owner
        self.plock_transi = PlayerLockTransi.NO_LOCK

        # FUTURE: pour plus tard.
        # self.visible = True
        # FUTURE: on gérera tout ça plus tard (rotation, scaling, ...).
        # Et ce sera dans un composant. Pas là-dedans paf.
        # self.offset_x = 0.0
        # self.offset_y = 0.0
        # self.angle = 0.0
        # self.scale_x = 1.0
        # self.scale_y = 1.0
        # self.opacity = 1.0
        # Not sure if we will implement the color_factor.
        # self.color_factor = (1.0, 1.0, 1.0)

        self._transitioner = None
        self._transitions_to_record = []
        self._must_clear_transitions = False
        self._transition_delay = None
        self._callback_end_transi = None
        self._one_shot_transition_delay = None
        self._one_shot_callback = None

    def get_coord(self):
        return Coord(coord=self._coord)

    # FUTURE : gérer une valeur de speed. transition = speed * distance à parcourir.
    # FUTURE: message d'erreur plus explicite quand on déplace un objet en dehors du jeu.
    # ou pas, car ça nécessite des vérifs qui vont faire ralentir...

    def move_to_xy(self, x, y, transition_delay=None, callback=None):
        self.layer_owner.move_game_object_xy(self, self._coord.x, self._coord.y, x, y)
        self._coord.x = x
        self._coord.y = y
        if transition_delay is not None:
            self._one_shot_transition_delay = transition_delay
        if callback is not None:
            self._one_shot_callback = callback

    def move_to(self, dest_coord, transition_delay=None, callback=None):
        # Code dupliqué avec le code de move_to_xy.
        # Je ne factorise pas, car ces deux fonctions vont être beaucoup utilisées.
        # (y compris par le javascript). Ça permet d'optimiser un peu
        # les performances, en évitant d'avoir une fonction qui appelle l'autre.
        self.layer_owner.move_game_object(self, self._coord, dest_coord)
        self._coord.x = dest_coord.x
        self._coord.y = dest_coord.y
        if transition_delay is not None:
            self._one_shot_transition_delay = transition_delay
        if callback is not None:
            self._one_shot_callback = callback

    def move(self, coord_offset, transition_delay=None, callback=None):
        dest_x = self._coord.x + coord_offset.x
        dest_y = self._coord.y + coord_offset.y
        self.move_to_xy(dest_x, dest_y, transition_delay, callback)

    def move_dir(self, direction, distance=1, transition_delay=None, callback=None):
        unary_vect_x, unary_vect_y = direction.vector
        dest_x = self._coord.x + unary_vect_x * distance
        dest_y = self._coord.y + unary_vect_y * distance
        self.move_to_xy(dest_x, dest_y, transition_delay, callback)

    def add_transition(self, transition):
        """
        Le paramètre transition peut être une instance de Callback,
        ou une instance de TransitionSteps.
        """
        # Au fur et à mesure qu'on applique ces transitions, il faut modifier les valeurs dans le jeu.
        # Ça veut dire que c'est le javascript qui appelle la fonction move_to_xy du game_object,
        # qui change le sprite_name, et éventuellement d'autres trucs.
        # (On applique les valeurs d'une transition lorsqu'on la démarre)
        self._transitions_to_record.append(transition)

    def clear_new_transitions(self):
        self._transitions_to_record[:] = []

    def clear_recorded_transitions(self):
        self._must_clear_transitions = True

    def ack_recorded_transitions_cleared(self):
        self._must_clear_transitions = False

    def get_nb_undone_transitions(self):
        if self._transitioner is None:
            return 0
        else:
            return len(self._transitioner.currentTransitions)

    def set_callback_end_transi(self, callback_end_transi):
        self._callback_end_transi = callback_end_transi

    def set_transition_delay(self, transition_delay):
        self._transition_delay = transition_delay

    def reset_one_shot_transition_delay(self):
        self._one_shot_transition_delay = None

    def reset_one_shot_callback(self):
        self._one_shot_callback = None


class Tile():

    def __init__(self, layer_owner, coord):
        self.layer_owner = layer_owner
        self._coord = coord
        self.game_objects = []
        # Cette variable contiendra un tuple de 8 éléments, qui sera les tiles adjacentes,
        # diagonales comprises, ordonnées de la même manière que Direction.
        # (en partant du haut et dans le sens des aiguilles d'une montre).
        self.adjacencies = None

    def get_coord(self):
        return Coord(coord=self._coord)


class LayerBase():

    def __init__(self, game_owner):
        self.game_owner = game_owner
        self._l_id = id(self)
        self.visible = True

    def get_game_objects(self, coord):
        raise NotImplementedError

    def iter_game_objects(self, iter_xs=None, iter_ys=None, by_line=True):
        # FUTURE. On verra plus tard.
        raise NotImplementedError

    def iter_all_game_objects(self):
        """
        The order is not guaranteed.
        """
        raise NotImplementedError

    def add_game_object(self, gobj):
        raise NotImplementedError

    def remove_game_object(self, gobj):
        raise NotImplementedError

    def move_game_object(self, gobj, src_coord, dest_coord):
        """
        You should not directly call this function.
        Just call gobj.move_to, gobj.move_to_xy, gobj.move or gobj.move_dir.
        """
        raise NotImplementedError

    def move_game_object_xy(self, gobj, src_x, src_y, dest_x, dest_y):
        """
        You should not directly call this function.
        Just call gobj.move_to, gobj.move_to_xy, gobj.move or gobj.move_dir.
        """
        raise NotImplementedError


class Layer(LayerBase):

    def __init__(self, game_owner, w, h, show_transitions=True):
        super().__init__(game_owner)
        self.w = w
        self.h = h
        self.show_transitions = show_transitions
        self.tiles = [
            [
                Tile(self, Coord(x, y)) for x in range(w)
            ]
            for y in range(h)
        ]
        for y in range(h):
            for x in range(w):
                self.tiles[y][x].adjacencies = self._make_adjacencies(x, y)

    def _make_adjacencies(self, x, y):
        """
        Returns a tuple of 8 elements containing the adjacent tiles.
        Some of the elements can be None, if the x and y are at a border.
        """
        adjacencies = (
            self.tiles[y - 1][x] if 0 <= y - 1 else None,
            self.tiles[y - 1][x + 1] if 0 <= y - 1 and x + 1 < self.w else None,
            self.tiles[y][x + 1] if x + 1 < self.w else None,
            self.tiles[y + 1][x + 1] if y + 1 < self.h and x + 1 < self.w else None,
            self.tiles[y + 1][x] if y + 1 < self.h else None,
            self.tiles[y + 1][x - 1] if y + 1 < self.h and 0 <= x - 1 else None,
            self.tiles[y][x - 1] if 0 <= x - 1 else None,
            self.tiles[y - 1][x - 1] if 0 <= y - 1 and 0 <= x - 1 else None,
        )
        return adjacencies

    def get_game_objects(self, coord):
        return self.get_tile(coord).game_objects

    def iter_all_game_objects(self):
        for line in self.tiles:
            for tile in line:
                for gobj in tile.game_objects:
                    yield gobj

    def get_tile(self, coord):
        return self.tiles[coord.y][coord.x]

    def get_tile_xy(self, x, y):
        return self.tiles[y][x]

    def add_game_object(self, gobj):
        gobj.layer_owner = self
        tile = self.get_tile(gobj._coord)
        tile.game_objects.append(gobj)

    def remove_game_object(self, gobj):
        gobj.layer_owner = None
        tile = self.get_tile(gobj.coord)
        tile.remove(gobj)

    def move_game_object(self, gobj, src_coord, dest_coord):
        self.get_tile(src_coord).game_objects.remove(gobj)
        self.get_tile(dest_coord).game_objects.append(gobj)

    def move_game_object_xy(self, gobj, src_x, src_y, dest_x, dest_y):
        self.get_tile_xy(src_x, src_y).game_objects.remove(gobj)
        self.get_tile_xy(dest_x, dest_y).game_objects.append(gobj)


class LayerSparse(LayerBase):

    def __init__(self, game_owner, w, h, show_transitions=True):
        super().__init__(game_owner)
        self.w = w
        self.h = h
        self.show_transitions = show_transitions
        self.game_objects = []

    def get_game_objects(self, coord):
        return [
            gobj for gobj
            in self.game_objects
            if gobj._coord == coord
        ]

    def iter_all_game_objects(self):
        for gobj in self.game_objects:
            yield gobj

    def add_game_object(self, gobj):
        gobj.layer_owner = self
        self.game_objects.append(gobj)

    def remove_game_object(self, gobj):
        gobj.layer_owner = None
        self.game_objects.remove(gobj)

    def move_game_object(self, gobj, src_coord, dest_coord):
        # Les coordonnées ont déjà été modifiées dans le gameObject.
        # On n'a rien à faire pour le LayerSparse lui-même,
        # car il se contente de stocker une liste de gameObject.
        pass

    def move_game_object_xy(self, gobj, src_x, src_y, dest_x, dest_y):
        # Pareil que move_game_object
        pass

class EventResult():

    def __init__(self):
        self.delayed_callbacks = []
        self.plocks_custom = []
        self.punlocks_custom = []

    def add_delayed_callback(self, delayed_callback):
        if not isinstance(delayed_callback, DelayedCallBack):
            raise Exception(
                "delayed_callback must be an instance of DelayedCallBack"
            )
        self.delayed_callbacks.append(delayed_callback)


class DelayedCallBack():

    def __init__(self, delay, callback):
        self.delay = delay
        self.callback = callback


class GameModelBase():

    def __init__(self, w, h, str_game_conf_json):
        self.w = w
        self.h = h
        self.str_game_conf_json = str_game_conf_json
        self.layers = []
        self.layers.append(Layer(self, w, h))
        self.layer_main = self.layers[0]
        # Par défaut: 200 ms de transition lorsqu'on déplace un objet.
        self.transition_delay = 200

    def on_start(self):
        pass

    def on_click(self, coord):
        pass

    def on_button_direction(self, direction):
        """
        Utilisez direction.vector pour avoir le tuple (dx, dy) du bouton de direction.
        """
        pass

    def on_button_action(self, action_name):
        pass
