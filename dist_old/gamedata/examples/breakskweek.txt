/gamedata/examples/breakskweek_tileset.png
--------
{
  "name": "Skweek Breakout",
  "version": "2.1.0",
  "game_area": {
    "nb_tile_width": 16,
    "nb_tile_height": 18
  },
  "tile_size": 48,
  "img_coords": {
    "skweek": [0, 0, 48, 48, "center"],
    "block_blue": [50, 0],
    "block_white": [100, 0],
    "authorized_zone": [150, 0],
    "bezel_blue": [0, 50],
    "whatever": [50, 50],
    "player_block": [100, 50],
    "block_blue_crack_1": [0, 100],
    "block_white_crack_1": [50, 100],
    "block_blue_crack_2": [0, 150],
    "block_white_crack_2": [50, 150],
    "bezel_blue_crack_1": [150, 50],
    "bezel_blue_crack_2": [200, 50],
    "congrats": [100, 100, 300, 100],
    "end": [0, 0]
  }
}
--------
"""
Tiny skweek plays Breakout.

Click on an empty blue square to add a solid square, on which your tiny skweek can bounce.

Destroy all the blocks and score the maximum points.
You don't have to destroy all the blocks on the borders to go to the next level,
so, you should keep the border blocks as long as possible.

The tiny skweek grows when you destroy a game block, but not one of your own block.
The tiny skweek shrinks a little each time you place a block. So, you better place them wisely,
instead of random-clicking everywhere.

On the first levels, when there are only a few blocks left, they automatically decay,
so that you don't have to precisely aim that damned last block.

Click the button 1 or 2 to restart a new game.

I developped this game with the Squarity engine (my personal project).
This engine is supposed to create games based only on 2D grids (like the minesweeper, tic-tac-toe, etc.)
But with the version 2 of the engine, we can do more things.
So, why not create a game not based on 2D grids, with an engine supposed to manage only 2D grids ?

This game is a tribute to two 1990's PC games, made by French video game studios:
Super Skweek: https://en.wikipedia.org/wiki/Super_Skweek
Popcorn: https://classicreload.com/popcorn.html#

Enjoy !
"""

import math
import random
import squarity
from squarity import Coord

RATIO_GE_TO_BR = 240
# Tous les angles sont en radians.

class BouncePoint:

    def __init__(self, cbr_pos, bounce_angle, block_owner=None):
        self.cbr_pos = cbr_pos
        self.bounce_angle = bounce_angle
        self.block_owner = block_owner

    def collides_with(self, skweek):
        if not skweek.rbr_skweek_bounds.in_bounds(skweek.cbr_pos):
            return None
        br_dist_sq = (skweek.cbr_pos.x - self.cbr_pos.x)**2 + (skweek.cbr_pos.y - self.cbr_pos.y)**2
        if br_dist_sq >= skweek.br_ray_squared or self.block_owner.immune:
            return None
        else:
            return br_dist_sq


class CollisionHandler:
    # TODO : les bounce_points indexés par cbr_pos, dans un dict.

    def __init__(self):
        self.reset()

    def reset(self):
        self.bounce_points = []

    def add_bounce_points(self, bounce_points):
        self.bounce_points.extend(bounce_points)

    def on_destroyed_block(self, block):
        self.bounce_points = [
            bounce_point for bounce_point
            in self.bounce_points
            if bounce_point.block_owner != block
        ]

    def collides_with(self, skweek):
        collisions = []
        for bounce_point in self.bounce_points:
            br_dist_sq = bounce_point.collides_with(skweek)
            if br_dist_sq is not None:
                collisions.append((br_dist_sq, bounce_point))
        if not collisions:
            return []
        nearest_colli = min(collisions, key=lambda x:x[0])
        # print("collision", nearest_colli[0], nearest_colli[1].cbr_pos)
        cbr_collision_pos = nearest_colli[1].cbr_pos
        collided_points = [
            bounce_point
            for (br_dist_sq, bounce_point) in collisions
            if bounce_point.cbr_pos == cbr_collision_pos
        ]
        # print("collided_points")
        # for p in collided_points:
        #     print(p.cbr_pos, (p.bounce_angle*360)/(math.pi*2))
        # print("----------")
        return collided_points

    def compute_bounced_angle(self, collided_points, skweek):
        angles = [bounce_point.bounce_angle for bounce_point in collided_points]
        bouncing_angle = sum(angles) / len(angles)
        # Formule retrouvée grâce à une longue réflexion à 5 heures du matin,
        # et des sacrifices de chèvres une nuit de pleine Lune.
        bounced_angle = 2 * bouncing_angle - skweek.angle + math.pi
        bounced_angle = bounced_angle % (2*math.pi)
        # print("bounced_angle", (bounced_angle*360)/(math.pi*2))
        return bounced_angle


class BlockTemplate():

    BEZEL_SHAPE = (
        (0, 60, (180.0+135.0)/2), (20, 40, 135.0), (40, 20, 135.0), (60, 0, (135.0+90.0)/2),
        (80, 0, 90.0), (100, 0, 90.0), (120, 0, 90.0), (140, 0, 90.0), (160, 0, 90.0),

        (180, 0, (90.0+45.0)/2), (200, 20, 45.0), (220, 40, 45.0), (240, 60, 45.0/2),
        (240, 80, 0.0), (240, 100, 0.0), (240, 120, 0.0), (240, 140, 0.0), (240, 160, 0.0),

        (240, 180, (315.0+360.0)/2), (220, 200, 315.0), (200, 220, 315.0), (180, 240, (270.0+315.0)/2),
        (160, 240, 270.0), (140, 240, 270.0), (120, 240, 270.0), (100, 240, 270.0), (80, 240, 270.0),

        (60, 240, (270.0+225.0)/2), (40, 220, 225.0), (20, 200, 225.0), (0, 180, (225.0+180.0)/2),
        (0, 160, 180.0), (0, 140, 180.0), (0, 120, 180.0), (0, 100, 180.0), (0, 80, 180.0),
    )

    SQUARE_SHAPE = (
        (0, 1, 180.0), (0, 0, 135.0), (1, 0, 90.0),
        (20, 0, 90.0), (40, 0, 90.0), (60, 0, 90.0), (80, 0, 90.0), (100, 0, 90.0), (120, 0, 90.0),
        (140, 0, 90.0), (160, 0, 90.0), (180, 0, 90.0), (200, 0, 90.0), (220, 0, 90.0),
        (239, 0, 90.0), (240, 0, 45.0), (240, 1, 0.0),
        (240, 20, 0.0), (240, 40, 0.0), (240, 60, 0.0), (240, 80, 0.0), (240, 100, 0.0), (240, 120, 0.0),
        (240, 140, 0.0), (240, 160, 0.0), (240, 180, 0.0), (240, 200, 0.0), (240, 220, 0.0),
        (240, 239, 0.0), (240, 240, 315.0), (239, 240, 270.0),
        (220, 240, 270.0), (200, 240, 270.0), (180, 240, 270.0), (160, 240, 270.0), (140, 240, 270.0), (120, 240, 270.0),
        (100, 240, 270.0), (80, 240, 270.0), (60, 240, 270.0), (40, 240, 270.0), (40, 240, 270.0),
        (1, 240, 270.0), (0, 240, 225.0), (0, 239, 180.0),
        (0, 220, 180.0), (0, 200, 180.0), (0, 180, 180.0), (0, 160, 180.0), (0, 140, 180.0), (0, 120, 180.0),
        (0, 100, 180.0), (0, 80, 180.0), (0, 60, 180.0), (0, 40, 180.0), (0, 20, 180.0),
    )

    def _convert_template(template_deg):
        template_rad = [
            (x, y, (angle * 2 * math.pi) / 360.0)
            for (x, y, angle) in template_deg
        ]
        return tuple(template_rad)

    def init_templates():
        BlockTemplate.bezel_shape = BlockTemplate._convert_template(BlockTemplate.BEZEL_SHAPE)
        BlockTemplate.square_shape = BlockTemplate._convert_template(BlockTemplate.SQUARE_SHAPE)

        BlockTemplate.template_from_spritename = {
            "block_blue": BlockTemplate.square_shape,
            "block_white": BlockTemplate.square_shape,
            "bezel_blue": BlockTemplate.bezel_shape,
            "player_block": BlockTemplate.square_shape,
        }


class Block(squarity.GameObject):

    def initialize(self):
        base_x = self._coord.x * RATIO_GE_TO_BR
        base_y = self._coord.y * RATIO_GE_TO_BR
        template = BlockTemplate.template_from_spritename[self.sprite_name]
        self.bounce_points = [
            BouncePoint(
                Coord(base_x + offset_x, base_y + offset_y), angle, self
            ) for (offset_x, offset_y, angle)
            in template
        ]
        self.immune = 0
        self.must_remove = False
        self.decay_delay = 0

    def play_turn(self):
        # Pas besoin de ce truc, car pas le temps
        # de mettre des blocs indestructibles ou à point de vie.
        #if self.immune:
        #    self.immune -= 1
        if self.decay_delay:
            self.decay_delay -= 1
            if self.decay_delay == 50:
                self.sprite_name = self.sprite_name[:-1] + "2"
            elif self.decay_delay == 0:
                self.must_remove = True

    def on_hit_by_skweek(self, skweek):
        # J'aime pas ce truc de immune. Mais j'ai pas mieux.
        # self.immune = 10
        self.must_remove = True

    def start_decay(self):
        self.decay_delay = 100
        # print(self.sprite_name)
        self.sprite_name += "_crack_1"


class Skweek(squarity.GameObject):

    def intialize(self, rge_game_bounds, backup_speed=25):
        # RGE = Rect Game Engine. Les coordonnées avec les unités du moteur de jeu.
        # CBR = Coord Breakout. Les coordonnées avec les unités du jeu de casse-brique
        # Il suffit juste de faire un scaling pour changer
        # entre les coord Game Engine et les coord Breakout.
        margin = RATIO_GE_TO_BR // 2
        self.rbr_game_bounds = squarity.Rect(
            -margin,
            -margin,
            rge_game_bounds.w*RATIO_GE_TO_BR + 2*margin,
            rge_game_bounds.h*RATIO_GE_TO_BR + 2*margin,
        )
        # print("rbr_game_bounds", self.rbr_game_bounds)
        self.cbr_move = Coord(1, 1)
        self.angle = 0
        self.speed = 1
        self.backup_speed = backup_speed
        self.start_level()

    def start_level(self):
        self.cbr_pos = Coord(RATIO_GE_TO_BR * 8, RATIO_GE_TO_BR * 13)
        self.set_angle((random.randrange(45, 135) * 2 * math.pi) / 360.0)
        self.set_speed(self.backup_speed)
        # print("set speed to backup:", self.backup_speed)
        self._set_vect_from_angle()
        self.set_ray(24)
        self._update_pos_screen()

    def set_angle(self, angle):
        self.angle = angle
        self._set_vect_from_angle()

    def set_speed(self, speed):
        self.speed = speed
        self._set_vect_from_angle()

    def set_ray(self, ray):
        self.br_ray = ray
        self.image_modifier.area_scale_x = (self.br_ray * 2) / RATIO_GE_TO_BR
        self.image_modifier.area_scale_y = (self.br_ray * 2) / RATIO_GE_TO_BR
        self.br_ray_squared = self.br_ray ** 2
        self._set_skweek_bounds()

    def play_turn(self):
        self.cbr_pos.move_by_vect(self.cbr_move)
        self._set_skweek_bounds()
        self._update_pos_screen()

    def is_in_game(self):
        return self.rbr_game_bounds.in_bounds(self.cbr_pos)

    def _set_vect_from_angle(self):
        self.cbr_move.x = math.cos(self.angle) * self.speed
        self.cbr_move.y = -math.sin(self.angle) * self.speed
        # print("set vect", self.cbr_move)

    def _set_skweek_bounds(self):
        self.rbr_skweek_bounds = squarity.Rect(
            self.cbr_pos.x - self.br_ray - 1,
            self.cbr_pos.y - self.br_ray - 1,
            self.br_ray*2 + 2,
            self.br_ray*2 + 2,
        )

    def _update_pos_screen(self):
        self.image_modifier.area_offset_x = self.cbr_pos.x/RATIO_GE_TO_BR - 0.5
        self.image_modifier.area_offset_y = self.cbr_pos.y/RATIO_GE_TO_BR - 0.5


class GameModel(squarity.GameModelBase):

    def on_start(self):
        self.transition_delay = 10
        BlockTemplate.init_templates()
        self.collision_handler = CollisionHandler()

        self.layer_skweek = squarity.Layer(self, self.w, self.h)
        self.skweek = None
        self.layers.append(self.layer_skweek)

        self.layer_authorized_zone = squarity.Layer(self, self.w, self.h, show_transitions=False)
        self.layers.insert(0, self.layer_authorized_zone)
        self.player_blocks = []
        self.congrats = None
        self.finished_level = False

        return self.start_game()

    def start_game(self):

        self.level = 0
        self.score = 0
        self.backup_speed = 25
        for coord in squarity.Sequencer.seq_iter(
            squarity.Sequencer.iter_on_rect(self.rect)
        ):
            self.layer_authorized_zone.remove_at_coord(coord)
            self.layer_main.remove_at_coord(coord)
        self.collision_handler.reset()

        for coord in squarity.Sequencer.seq_iter(
            squarity.Sequencer.iter_on_rect(self.rect)
        ):
            if any(
                (
                    coord.x < 2,
                    coord.y < 2,
                    coord.x > self.w -3,
                    coord.y > self.h -3,
                )
            ):
                self.layer_authorized_zone.add_game_object(
                    squarity.GameObject(coord, "authorized_zone")
                )
        self.put_blocks_on_borders()

        if self.skweek is not None:
            self.layer_skweek.remove_game_object(self.skweek)
        self.skweek = Skweek(
            squarity.Coord(0, 0),
            "skweek",
            image_modifier=squarity.ComponentImageModifier()
        )
        skweek = self.skweek
        skweek.intialize(self.rect, self.backup_speed)
        self.layer_skweek.add_game_object(skweek)
        skweek.start_level()

        self.playing = False
        self.finished_level = True
        print("click in the game to start.")
        # return self.game_tick()

    def start_level(self):
        if self.skweek is not None:
            self.layer_skweek.remove_game_object(self.skweek)
        self.skweek = Skweek(
            squarity.Coord(0, 0),
            "skweek",
            image_modifier=squarity.ComponentImageModifier()
        )
        skweek = self.skweek
        skweek.intialize(self.rect, self.backup_speed)
        self.layer_skweek.add_game_object(skweek)
        skweek.start_level()

        x_margin = max((1, 3 - self.level))
        y_margin = min((5, self.level))
        proba_bezel = min(50, self.level * 7)
        nb_blocks = 20
        potential_coords = []
        for x_tile in range(x_margin, self.w - x_margin):
            for y_tile in range(9 - y_margin, 11 + y_margin):
                potential_coords.append(Coord(x_tile, y_tile))

        random.shuffle(potential_coords)
        sprites = ["block_white", "block_blue"]
        for coord in potential_coords[:nb_blocks]:
            if random.randrange(100) < proba_bezel:
                block = Block(coord, "bezel_blue")
            else:
                block = Block(coord, sprites[(coord.x+coord.y) % 2])
            block.initialize()
            self.layer_main.add_game_object(block)
            self.collision_handler.add_bounce_points(block.bounce_points)

    def check_end_level(self):
        iter_blocks = squarity.Sequencer.seq_iter(
            squarity.Sequencer.iter_on_rect(
                squarity.Rect(1, 1, self.w-2, self.h-1)
            ),
            squarity.Sequencer.gobj_on_layers([self.layer_main]),
            squarity.Sequencer.filter_sprites(
                [
                    "block_blue", "block_white", "bezel_blue",
                    "block_blue_crack_1", "block_white_crack_1",
                    "block_blue_crack_2", "block_white_crack_2",
                    "bezel_blue_crack_1", "bezel_blue_crack_2",
                ]
            )
        )
        blocks_to_destroy = list(iter_blocks)
        nb_blocks_to_destroy = len(blocks_to_destroy)
        # print("nb_blocks_to_destroy", nb_blocks_to_destroy)
        if not nb_blocks_to_destroy:
            return True

        if nb_blocks_to_destroy < 10 - self.level:
            decayable_blocks = []
            for block in blocks_to_destroy:
                if "crack" in block.sprite_name:
                    return False
                else:
                    decayable_blocks.append(block)
            if decayable_blocks:
                block_to_decay = random.choice(blocks_to_destroy)
                # print("start decay")
                block_to_decay.start_decay()

        return False

    def put_blocks_on_borders(self):
        sprites = ["block_white", "block_blue"]
        for x_tile in range(self.w):
            # TODO : duplicate code de gros dégueulasse.
            coord = Coord(x_tile, 0)
            block = Block(coord, sprites[(coord.x+coord.y) % 2])
            block.initialize()
            self.layer_main.add_game_object(block)
            self.collision_handler.add_bounce_points(block.bounce_points)

        for y_tile in range(1, self.h - 1):
            # TODO : meta-duplicate code de meta-gros dégueulasse.
            coord = Coord(0, y_tile)
            block = Block(coord, sprites[(coord.x+coord.y) % 2])
            block.initialize()
            self.layer_main.add_game_object(block)
            self.collision_handler.add_bounce_points(block.bounce_points)

            coord = Coord(self.w-1, y_tile)
            block = Block(coord, sprites[(coord.x+coord.y) % 2])
            block.initialize()
            self.layer_main.add_game_object(block)
            self.collision_handler.add_bounce_points(block.bounce_points)

    def iter_on_blocks(self):
        for block in squarity.Sequencer.seq_iter(
            squarity.Sequencer.iter_on_rect(self.rect),
            squarity.Sequencer.gobj_on_layers([self.layer_main]),
        ):
            yield block

    def game_tick(self):
        if not self.playing:
            return
        skweek = self.skweek

        for block in self.iter_on_blocks():
            block.play_turn()

        collided_points = self.collision_handler.collides_with(skweek)
        if collided_points:
            bounced_angle = self.collision_handler.compute_bounced_angle(
                collided_points,
                skweek,
            )
            skweek.set_angle(bounced_angle)
            for coll_p in collided_points:
                coll_p.block_owner.on_hit_by_skweek(skweek)
                if coll_p.block_owner.sprite_name == "player_block":
                    skweek.set_speed(skweek.backup_speed)
                else:
                    skweek.set_speed(skweek.speed + 2)
                    skweek.set_ray(min([skweek.br_ray + 5, 480]))
                    self.score += skweek.br_ray

        blocks_to_remove = [
            block for block in self.iter_on_blocks() if block.must_remove
        ]
        if blocks_to_remove:
            for block in blocks_to_remove:
                self.layer_main.remove_game_object(block)
                self.collision_handler.on_destroyed_block(block)
            if self.check_end_level():
                print("score:", self.score)
                if self.level == 0:
                    print()
                    print("Click in the game to start the next level.")
                self.level += 1
                self.backup_speed += 5
                self.congrats = squarity.GameObject(Coord(6, 8), "congrats")
                self.layer_main.add_game_object(self.congrats)
                self.finished_level = True
                self.playing = False
                return

        skweek.play_turn()
        if not skweek.is_in_game():
            print("The tiny skweek is dead.")
            print("final score:", self.score)
            print("Press the button 1 or 2 to restart.")
            self.playing = False
            return

        event_result = squarity.EventResult()
        event_result.add_delayed_callback(
            squarity.DelayedCallBack(20, self.game_tick)
        )
        event_result.no_redraw = True
        return event_result

    def on_button_action(self, action_name):
        if self.playing:
            print("Game aborted. Press the button again to restart.")
            self.playing = False
        else:
            return self.start_game()

    def on_click(self, coord):
        if not self.playing:
            if self.finished_level:
                self.finished_level = False
                self.playing = True
                if self.congrats is not None:
                    self.layer_main.remove_game_object(self.congrats)
                    self.congrats = None
                self.start_level()
                return self.game_tick()

        if self.layer_main.get_game_objects(coord):
            return
        if not self.layer_authorized_zone.get_game_objects(coord):
            return

        block = Block(coord, "player_block")
        block.initialize()
        self.layer_main.add_game_object(block)
        self.collision_handler.add_bounce_points(block.bounce_points)
        self.player_blocks.append(block)
        self.skweek.set_ray(max([self.skweek.br_ray - 1, 24]))
        if len(self.player_blocks) > 2:
            block_to_remove = self.player_blocks.pop(0)
            block_to_remove.must_remove = True

